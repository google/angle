# Copyright 2021 The ANGLE Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is a .pyl, or "Python Literal", file. You can treat it just like a
# .json file, with the following exceptions:
# * all keys must be quoted (use single quotes, please);
# * comments are allowed, using '#' syntax; and
# * trailing commas are allowed.

{
  # This is a map of builder group names -> builder names -> config names
  # (where each config name is a key in the 'configs' dict, below). MB uses
  # this dict to look up which config to use for a given bot.
  'builder_groups': {
    'angle': {
      'android-arm-dbg': 'angle_goma_android_arm_debug_bot',
      'android-arm-rel': 'angle_goma_android_arm_release_bot',
      'android-arm64-dbg': 'angle_goma_android_arm64_debug_bot',
      'android-arm64-rel': 'angle_goma_android_arm64_release_bot',
      'android-perf': 'angle_goma_android_perf_bot',
      'linux-clang-dbg': 'angle_goma_debug_bot',
      'linux-clang-rel': 'angle_goma_release_bot',
      'linux-gcc-dbg': 'angle_non_clang_debug_bot',
      'linux-gcc-rel': 'angle_non_clang_release_bot',
      'linux-perf': 'angle_goma_perf_bot',
      'mac-dbg': 'angle_goma_debug_bot',
      'mac-rel': 'angle_goma_release_bot',
      'win-clang-x64-dbg': 'angle_goma_debug_bot',
      'win-clang-x64-rel': 'angle_goma_release_bot',
      'win-clang-x86-dbg': 'angle_goma_x86_debug_bot',
      'win-clang-x86-rel': 'angle_goma_x86_release_bot',
      'win-msvc-x64-dbg': 'angle_non_clang_debug_bot',
      'win-msvc-x64-rel': 'angle_non_clang_release_bot',
      'win-msvc-x86-dbg': 'angle_non_clang_x86_debug_bot',
      'win-msvc-x86-rel': 'angle_non_clang_x86_release_bot',
      'win-perf': 'angle_goma_perf_bot',
      'winuwp-x64-dbg': 'angle_winuwp_non_clang_debug_bot',
      'winuwp-x64-rel': 'angle_winuwp_non_clang_release_bot',
    },
  },

  # This is the list of configs that you can pass to mb; each config
  # represents a particular combination of gn args that
  # we must support. A given config *may* be platform-specific but
  # is not necessarily so (i.e., we might have mac, win, and linux
  # bots all using the 'release_bot' config).
  'configs': {
    'angle_goma_android_arm_debug_bot': ['angle', 'opencl', 'traces', 'goma', 'android', 'arm', 'debug'],
    'angle_goma_android_arm_release_bot': ['angle', 'opencl', 'traces', 'goma', 'android', 'arm', 'release'],
    'angle_goma_android_arm64_debug_bot': ['angle', 'opencl', 'traces', 'goma', 'android', 'arm64', 'debug'],
    'angle_goma_android_arm64_release_bot': ['angle', 'opencl', 'traces', 'goma', 'android', 'arm64', 'release'],
    'angle_goma_android_perf_bot': ['angle', 'traces', 'goma', 'android', 'arm64', 'perf'],
    'angle_goma_debug_bot': ['angle', 'opencl', 'traces', 'goma', 'debug'],
    'angle_goma_perf_bot': ['angle', 'traces', 'goma', 'perf'],
    'angle_goma_release_bot': ['angle', 'opencl', 'traces', 'goma', 'release'],
    'angle_goma_x86_debug_bot': ['angle', 'opencl', 'traces', 'goma', 'x86', 'debug'],
    'angle_goma_x86_release_bot': ['angle', 'opencl', 'traces', 'goma', 'x86', 'release'],
    'angle_non_clang_debug_bot': ['angle', 'opencl', 'non_clang', 'debug'],
    'angle_non_clang_release_bot': ['angle', 'opencl', 'non_clang', 'release'],
    'angle_non_clang_x86_debug_bot': ['angle', 'opencl', 'non_clang', 'x86', 'debug'],
    'angle_non_clang_x86_release_bot': ['angle', 'opencl', 'non_clang', 'x86', 'release'],
    'angle_winuwp_non_clang_debug_bot': ['angle', 'winuwp', 'non_clang', 'debug'],
    'angle_winuwp_non_clang_release_bot': ['angle', 'winuwp', 'non_clang', 'release'],
  },

  # This is a dict mapping a given 'mixin' name to a dict of settings that
  # mb should use. See //tools/mb/docs/user_guide.md for more information.
  'mixins': {
    'android': {
      'gn_args': 'target_os="android"',
    },
    'angle': {
      'gn_args': 'build_angle_gles1_conform_tests=true is_component_build=true',
    },
    'opencl': {
      'gn_args': 'angle_enable_cl=true',
    },
    'arm': {
      'gn_args': 'target_cpu="arm"',
    },
    'arm64': {
      'gn_args': 'target_cpu="arm64"',
    },
    'debug': {
      'gn_args': 'is_debug=true',
    },
    'goma': {
      'gn_args': 'use_goma=true',
    },
    'non_clang': {
      'gn_args': 'is_clang=false',
    },
    'perf': {
      'gn_args': 'is_debug=false dcheck_always_on=false symbol_level=1',
    },
    'release': {
      'gn_args': 'is_debug=false dcheck_always_on=true symbol_level=1',
    },
    'traces': {
      'gn_args': 'build_angle_trace_perf_tests=true',
    },
    'winuwp': {
      'gn_args': 'target_os="winuwp"',
    },
    'x86': {
      'gn_args': 'target_cpu="x86"',
    },
  },
}
